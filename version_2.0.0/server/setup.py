#!/usr/bin/env python
import os
import sys
import shutil
import logging
from pathlib import Path
import importlib.util

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Determine paths
SCRIPT_DIR = Path(__file__).parent.absolute()
PROJECT_ROOT = SCRIPT_DIR.parent
BACKEND_DIR = PROJECT_ROOT.parent / "backend"
SERVER_MODULES_DIR = SCRIPT_DIR / "modules"

# Files to copy/link
BACKEND_FILES_TO_IMPORT = [
    "documorph_ai.py",
    "table_extraction.py",
    "chart_extraction.py",
    "documorph_fixes.py",
]

# Files from version1.0.0 to import
VERSION100_FILES_TO_IMPORT = [
    "table_extraction.py",
    "chart_extraction.py"
]

def ensure_directory(path):
    """Ensure a directory exists."""
    if not path.exists():
        path.mkdir(parents=True)
        logger.info(f"Created directory: {path}")

def create_symlink(source, target):
    """Create a symbolic link or copy the file if symlinks aren't supported."""
    try:
        # Try to create a symbolic link first
        if os.path.exists(target):
            os.remove(target)
            
        os.symlink(source, target)
        logger.info(f"Created symlink: {target} -> {source}")
    except (OSError, AttributeError):
        # If symbolic links are not supported (e.g., on Windows without admin privileges)
        # or if another error occurs, copy the file instead
        try:
            shutil.copy2(source, target)
            logger.info(f"Copied file: {source} -> {target}")
        except Exception as e:
            logger.error(f"Failed to copy {source} to {target}: {e}")
            return False
    return True

def create_init_file(directory):
    """Create an __init__.py file in the directory."""
    init_file = directory / "__init__.py"
    if not init_file.exists():
        with open(init_file, "w") as f:
            f.write("# Generated by setup.py\n")
        logger.info(f"Created __init__.py in {directory}")

def setup_backend_modules():
    """Set up backend modules by creating symlinks or copying files."""
    # Ensure modules directory exists
    ensure_directory(SERVER_MODULES_DIR)
    create_init_file(SERVER_MODULES_DIR)
    
    # Copy files from backend directory
    success = True
    for filename in BACKEND_FILES_TO_IMPORT:
        source = BACKEND_DIR / filename
        target = SERVER_MODULES_DIR / filename
        
        if source.exists():
            success = create_symlink(source, target) and success
        else:
            logger.warning(f"Source file does not exist: {source}")
    
    # Copy files from version1.0.0 directory if they exist
    version100_dir = BACKEND_DIR / "version1.0.0"
    if version100_dir.exists():
        for filename in VERSION100_FILES_TO_IMPORT:
            source = version100_dir / filename
            if source.exists():
                # Use a different name for version1.0.0 files
                target = SERVER_MODULES_DIR / f"v100_{filename}"
                success = create_symlink(source, target) and success
    
    # Create the wrapper module
    create_wrapper_module()
    
    return success

def create_wrapper_module():
    """Create a wrapper module to import all needed functionality."""
    wrapper_path = SCRIPT_DIR / "documorph_wrapper.py"
    
    # If wrapper already exists, we leave it alone
    if wrapper_path.exists():
        logger.info(f"Wrapper module already exists at {wrapper_path}")
        return True
        
    # Import statement lines
    import_lines = [
        "import os",
        "import sys",
        "import logging",
        "",
        "# Configure logging",
        "logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')",
        "logger = logging.getLogger(__name__)",
        "",
        "# Add parent directory to sys.path",
        "parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))",
        "sys.path.append(parent_dir)",
        "",
        "try:",
        "    # Import from backend",
        "    from backend.documorph_ai import (",
        "        process_document,",
        "        apply_template_to_document,",
        "        initialize_db_templates,",
        "        get_templates_for_user,",
        "        UserTier,",
        "        extract_document_structure,",
        "        generate_abstract,",
        "        detect_tables_from_pdf,",
        "        detect_figures_from_pdf,",
        "        add_table_to_docx,",
        "        add_figure_to_docx,",
        "        analyze_document_chapters,",
        "        open_pdf",
        "    )",
        "    ",
        "    # Version 1.0.0 imports",
        "    try:",
        "        sys.path.append(os.path.join(parent_dir, 'backend', 'version1.0.0'))",
        "        from table_extraction import extract_tables",
        "        from chart_extraction import identify_and_extract_charts",
        "        logger.info('Successfully imported version1.0.0 modules')",
        "    except ImportError:",
        "        logger.warning('Could not import version1.0.0 modules')",
        "    ",
        "    # Import fixes if available",
        "    try:",
        "        from backend.documorph_fixes import (",
        "            open_pdf,",
        "            extract_tables_from_pdf,",
        "            extract_figures_from_pdf,",
        "            initialize_db_templates as enhanced_initialize_templates,",
        "            setup_google_drive_auth",
        "        )",
        "        ",
        "        # Override with enhanced versions",
        "        initialize_db_templates = enhanced_initialize_templates",
        "        logger.info('Successfully imported fixes')",
        "    except ImportError:",
        "        logger.warning('Could not import fixes')",
        "    ",
        "    logger.info('Successfully imported wrapper module')",
        "    ",
        "except ImportError as e:",
        "    logger.error(f'Failed to import backend modules: {e}')",
        "    ",
        "    # Define fallback functionality",
        "    class UserTier:",
        "        FREE = 'free'",
        "        PREMIUM = 'premium'",
        "    ",
        "    def process_document(file_path, file_type, user_tier=UserTier.FREE):",
        "        logger.error('Unable to process document: backend modules not available')",
        "        return None, 'Backend modules not available', [], []",
        "    ",
        "    def apply_template_to_document(doc_path, template, output_path, tables=None, figures=None, chapters=None):",
        "        logger.error('Unable to apply template: backend modules not available')",
        "        return False, 'Backend modules not available'",
        "    ",
        "    def initialize_db_templates(user_id):",
        "        logger.error('Unable to initialize templates: backend modules not available')",
        "        return False",
        "    ",
        "    def get_templates_for_user(user_id, templates_collection, user_tier=UserTier.FREE):",
        "        logger.error('Unable to get templates: backend modules not available')",
        "        return []",
    ]
    
    # Write wrapper module
    with open(wrapper_path, "w") as f:
        f.write("\n".join(import_lines))
    
    # Verify it can be imported
    try:
        sys.path.insert(0, str(SCRIPT_DIR))
        import documorph_wrapper
        logger.info("Successfully imported wrapper module")
        return True
    except ImportError as e:
        logger.error(f"Failed to import wrapper module: {e}")
        return False

def main():
    """Main entry point."""
    logger.info("Setting up backend modules...")
    if setup_backend_modules():
        logger.info("Backend module setup complete")
    else:
        logger.error("Failed to set up backend modules")

if __name__ == "__main__":
    main() 